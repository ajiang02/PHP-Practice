<?php

namespace app\bridge\controller;

/**
 * 1、如果不是桥接模式，那么类有：
 *  红色的正方形、黄色的正方形、蓝色的正方形...
 *  红色的三角形、黄色的三角形、蓝色的三角形...
 *  红色的椭圆形、黄色的椭圆形、蓝色的椭圆形...
 *  总的类 > n × m （n是图形种类数，m是颜色种类数）
 *  每增加一种图形，就需要增加 m 种颜色的图形类。每增加一种颜色，就需要增加 n 种颜色的图形类
 *
 * 2、如果是桥接模式，类有：
 *  正方形类、三角形类、椭圆形类
 *  红色类、黄色类、蓝色类
 *  总的类 ≈ n + m （n是图形种类数，m是颜色种类数）
 *  不管是增加图形或是颜色，就只需要增加一个类
 *
 *  3、优先使用 对象合成/聚合复用原则，而不是 类继承。
 *
 *  4、桥接模式则是为了让抽象和实现解耦；在减少创建类的同时还可以方便组合功能；
 */
class Test
{
    // 测试
    public function test()
    {
        $square = new Square(new Red());            // 产生：红色的正方形实例
        $square->display();                         // 输出：这是一个红色的正方形

        $square_yellow = new Square(new Yellow());  // 产生：黄色的正方形实例
        $square_yellow->display();                  // 输出：这是一个黄色的正方形</br>

        $triangle = new Triangle(new Bule());       // 产生：蓝色的三角形实例
        $triangle->display();                       // 输出：这是一个蓝色的三角形
    }
}
